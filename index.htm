<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Mini Maps - Cálculo de Ruta</title>
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <style>
    #mapa {
      height: 500px;
    }
    #modoSeleccion, #distancia {
      margin-top: 10px;
    }
    /* Estilos para las instrucciones */
    #instrucciones {
      margin-top: 10px;
    }
    #listaInstrucciones li {
      font-size: 1rem;
      padding: 10px;
      border-bottom: 1px solid #f0f0f0;
      background: #fafafa;
    }
    #listaInstrucciones li:last-child {
      border-bottom: none;
    }
    .badge-step {
      font-size: 1rem;
      margin-right: 10px;
    }
  </style>
</head>
<body>
  <div class="container my-4">
    <h1>Mini Maps - Cálculo de Ruta</h1>

    <div class="form-group">
      <label for="origen">Origen:</label>
      <input type="text" class="form-control" id="origen" placeholder="Ej: Ciudad de México o 19.4326, -99.1332">
    </div>

    <div class="form-group">
      <label for="destino">Destino:</label>
      <input type="text" class="form-control" id="destino" placeholder="Ej: Otra dirección o 19.427, -99.133">
    </div>

    <!-- Botones para seleccionar dirección en el mapa -->
    <button class="btn btn-secondary" onclick="actualizarModo('origen')">Seleccionar Origen en el Mapa</button>
    <button class="btn btn-secondary" onclick="actualizarModo('destino')">Seleccionar Destino en el Mapa</button>
    <br><br>

    <button class="btn btn-primary" id="calcularRuta">Calcular Ruta</button>
    <button class="btn btn-danger" id="limpiarMapa">Limpiar Mapa</button>

    <p id="modoSeleccion" class="my-3">Modo: Ninguno</p>
    <div id="distancia" class="mb-3"></div>

    <!-- Apartado de instrucciones con formato estético mejorado -->
    <div id="instrucciones" class="card">
      <div class="card-header">Instrucciones de la Ruta</div>
      <ol class="list-group list-group-flush" id="listaInstrucciones"></ol>
    </div>

    <div id="mapa" class="mt-3"></div>
  </div>

  <!-- Librerías -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

  <script>
    // Inicializa el mapa centrado en Ciudad de México
    var mapa = L.map('mapa').setView([19.4326, -99.1332], 12);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '© OpenStreetMap contributors'
    }).addTo(mapa);

    let markerOrigen, markerDestino, rutaLayer;
    let modo = null;

    const txtOrigen = document.getElementById('origen');
    const txtDestino = document.getElementById('destino');
    const btnCalcular = document.getElementById('calcularRuta');
    const btnLimpiar = document.getElementById('limpiarMapa');
    const spanModo = document.getElementById('modoSeleccion');
    const listaInstrucciones = document.getElementById('listaInstrucciones');
    const distanciaTexto = document.getElementById('distancia');

    // Actualiza el modo para seleccionar marcadores en el mapa
    function actualizarModo(nuevoModo) {
      modo = nuevoModo;
      spanModo.textContent = modo ? (modo === 'origen' ? 'Seleccionar Origen' : 'Seleccionar Destino') : 'Ninguno';
      console.log("Modo actualizado a:", modo);
    }

    // Al hacer clic en el mapa se coloca el marcador según el modo activo
    mapa.on('click', function (e) {
      if (!modo) return;
      const { lat, lng } = e.latlng;
      if (modo === 'origen') {
        if (markerOrigen) mapa.removeLayer(markerOrigen);
        markerOrigen = L.marker([lat, lng]).addTo(mapa).bindPopup('Origen').openPopup();
        txtOrigen.value = `${lat.toFixed(5)}, ${lng.toFixed(5)}`;
      } else if (modo === 'destino') {
        if (markerDestino) mapa.removeLayer(markerDestino);
        markerDestino = L.marker([lat, lng]).addTo(mapa).bindPopup('Destino').openPopup();
        txtDestino.value = `${lat.toFixed(5)}, ${lng.toFixed(5)}`;
      }
      actualizarModo(null);
    });

    // Función para obtener coordenadas usando Nominatim
    async function obtenerCoordenadas(lugar) {
      try {
        const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(lugar)}`;
        const respuesta = await fetch(url, { 
          headers: { 'User-Agent': 'MiniMaps/1.0 (tu-email@ejemplo.com)' }
        });
        if (!respuesta.ok) throw new Error(`Error en la solicitud: ${respuesta.status}`);
        const datos = await respuesta.json();
        if (datos.length === 0) {
          alert('No se encontraron coordenadas para el lugar ingresado.');
          return null;
        }
        return [parseFloat(datos[0].lat), parseFloat(datos[0].lon)];
      } catch (error) {
        console.error('Error al obtener coordenadas:', error);
        alert('Hubo un problema al buscar el lugar.');
        return null;
      }
    }

    // Función para calcular y dibujar la ruta usando OSRM
    async function calcularRuta() {
      let coordOrigen = txtOrigen.value.trim();
      let coordDestino = txtDestino.value.trim();

      if (!coordOrigen || !coordDestino) {
        alert('Por favor, ingresa ambas direcciones.');
        return;
      }

      // Si se ingresan coordenadas directamente, se usan; de lo contrario, se geocodifican
      coordOrigen = coordOrigen.includes(',')
        ? coordOrigen.split(',').map(n => Number(n.trim()))
        : await obtenerCoordenadas(coordOrigen);
      coordDestino = coordDestino.includes(',')
        ? coordDestino.split(',').map(n => Number(n.trim()))
        : await obtenerCoordenadas(coordDestino);

      if (!coordOrigen || !coordDestino) {
        alert("No se encontraron coordenadas válidas.");
        return;
      }

      // Limpia marcadores y rutas anteriores
      if (markerOrigen) mapa.removeLayer(markerOrigen);
      if (markerDestino) mapa.removeLayer(markerDestino);
      if (rutaLayer) mapa.removeLayer(rutaLayer);
      listaInstrucciones.innerHTML = '';
      distanciaTexto.textContent = '';

      // Coloca marcadores en el mapa
      markerOrigen = L.marker(coordOrigen).addTo(mapa).bindPopup('Origen').openPopup();
      markerDestino = L.marker(coordDestino).addTo(mapa).bindPopup('Destino').openPopup();

      // OSRM requiere "lon,lat" en la URL, por eso se invierte el orden
      const urlRuta = `https://router.project-osrm.org/route/v1/driving/${coordOrigen[1]},${coordOrigen[0]};${coordDestino[1]},${coordDestino[0]}?overview=full&geometries=geojson&steps=true`;
      console.log("URL para OSRM:", urlRuta);

      try {
        const respuesta = await fetch(urlRuta);
        const datosRuta = await respuesta.json();
        console.log("Respuesta de OSRM:", datosRuta);

        if (datosRuta.code !== "Ok") {
          alert("Error en OSRM: " + datosRuta.code);
          return;
        }

        if (datosRuta.routes && datosRuta.routes.length > 0) {
          const ruta = datosRuta.routes[0];
          const coordenadasRuta = ruta.geometry.coordinates.map(coord => [coord[1], coord[0]]);
          rutaLayer = L.polyline(coordenadasRuta, { color: 'blue' }).addTo(mapa);
          mapa.fitBounds(rutaLayer.getBounds());
          distanciaTexto.textContent = `Distancia: ${(ruta.distance / 1000).toFixed(2)} km`;

          // Muestra las instrucciones en un formato más atractivo
          const steps = ruta.legs[0].steps;
          steps.forEach((step, index) => {
            let instruction = step.maneuver.instruction || '';
            if (!instruction && step.name) {
              instruction = 'Continúe por ' + step.name;
            }
            if (!instruction) {
              instruction = 'Avance';
            }
            const li = document.createElement('li');
            li.className = 'list-group-item';
            li.innerHTML = `<span class="badge badge-primary badge-step">Paso ${index + 1}</span> ${instruction}`;
            listaInstrucciones.appendChild(li);
          });
        } else {
          alert('No se pudo obtener la ruta.');
        }
      } catch (error) {
        console.error('Error al calcular la ruta:', error);
        alert('Hubo un problema al calcular la ruta.');
      }
    }

    btnCalcular.addEventListener('click', calcularRuta);
    btnLimpiar.addEventListener('click', () => location.reload());
  </script>
</body>
</html>
